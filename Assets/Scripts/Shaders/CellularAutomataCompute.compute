// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;



// Dimension of the grid
uint dimmX = 256;
uint dimmY = 256;

// Structured buffer to hold all the cells 
RWStructuredBuffer<Cell> Cells;

// Kernel to initialize the grid with perlin noise
// and set the initial state of each cell
[numthreads(32, 32, 1)]
void InitGrid(uint3 threadId : SV_DispatchThreadID)
{
    // Get the current cell
    Cell cell = Cells[threadId.x + threadId.y * dimmX];

    // Set the cell position
    cell.Position = float2(threadId.x, threadId.y);

    // Set the cell velocity
    cell.Velocity = float2(0.0f, 0.0f);

    // Set the cell density
    cell.Density = 0.0f;

    // Set the cell pressure
    cell.Pressure = 0.0f;

    // Set the cell temperature
    cell.Temperature = 0.0f;

    // Set the cell already processed flag
    cell.Processed = false;

    // Set the cell type
    cell.type = 0;

    // Set the cell state
    cell.state = 0;

    // Set the cell age
    cell.age = 0;

    // get noise value
    float noise = PerlinNoise(cell.Position.x, cell.Position.y);

    // Set the current cell
    Cells[threadId.x + threadId.y * dimmX] = cell;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    



    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
